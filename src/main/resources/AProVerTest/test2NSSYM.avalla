scenario test2NSSYM

//Test di receiver Eve in modalitÃ  Passiva

load Needham_SchroederNSSYM.asm

//controllo che nello stato inziale:
//  stato iniziale di Alice sia IDLE_A
//  stato iniziale di Bob sia Waiting_NAK 
// si impostano quindi le conoscenze per i singoli attori
set chosenMode:=ACTIVE;
set chosenReceiver:=AG_E;
check 	internalStateA(agentA)=IDLE_MA;
check	internalStateS(agentS)=WAITING_MB;
check	internalStateB(agentB)=WAITING_MD;

check	knowsNonce(agentA,NA)=true;
check	knowsNonce(agentB,NB)=true;

check	knowsIdentityCertificate(agentA, CA)=true;
check	knowsIdentityCertificate(agentA, CB)=true;
check	knowsIdentityCertificate(agentA, CE)=true;
check	knowsIdentityCertificate(agentB, CA)=true;
check	knowsIdentityCertificate(agentB, CB)=true;
check	knowsIdentityCertificate(agentB, CE)=true;
check	knowsIdentityCertificate(agentE, CE)=true;

check	knowsSymKey(agentA, KAS)=true;
check	knowsSymKey(agentA, KAB)=true;
check	knowsSymKey(agentB, KBS)=true;
check	knowsSymKey(agentB, KAB)=true;
check	knowsSymKey(agentE, KEA)=true;
check	knowsSymKey(agentE, KEB)=true;
check	knowsSymKey(agentE, KES)=true;
check	knowsSymKey(agentS, KAS)=true;
check	knowsSymKey(agentS, KBS)=true;
check	knowsSymKey(agentS, KAB)=true;

check mode=ACTIVE;
check receiver=AG_E;

// step 1 -  Alice->Server:{CA,CB,NA} --trasformato --- Alice -> Eve {CA,CB,NA}
// 

		//check informazioni base
	
step
check mode=ACTIVE;

check 	protocolMessage(0,agentA,agentE)=MA;
check	messageField(agentA,agentE,1,MA)=CA;
check	messageField(agentA,agentE,2,MA)=CB;
check	messageField(agentA,agentE,3,MA)=NA;
check	internalStateA(agentA)=WAITING_MC;

        // Informazioni in input step 2	
check protocolMessage(0,agentA,agentE)=MA;
check protocolMessage(0,agentE,agentS)!=MA;


// step 2 -  Alice->Server:{CA,CB,NA} --trasformato --- Eve --> Server {CA,CB,NA} 
		//Eve alimenta le prprie conoscenze con i dati ricevuti in chiaro da Alice
	
step
check mode=ACTIVE;

// Eve memorizza le proprie conoscenze
check   knowsIdentityCertificate(agentE,messageField(agentA,agentE,1,MA))=true;
check   knowsIdentityCertificate(agentE,messageField(agentA,agentE,2,MA))=true;
check   knowsNonce(agentE,messageField(agentA,agentE,3,MA))=true;

// Eve prepara i campi del messaggio da inviare al Server
check   messageField(agentE,agentS,1,MA)=messageField(agentA,agentE,1,MA);
check   messageField(agentE,agentS,2,MA)=messageField(agentA,agentE,2,MA);
check 	messageField(agentE,agentS,3,MA)=messageField(agentA,agentE,3,MA);
check 	protocolMessage(0,agentE,agentS)=MA;
// verifico il contenuto dei campi
check	messageField(agentE,agentS,1,MA)=CA;
check	messageField(agentE,agentS,2,MA)=CB;
check	messageField(agentE,agentS,3,MA)=NA;

  // Informazioni in input step 3
check 	internalStateS(agentS)=WAITING_MB;
check	protocolMessage(0,agentE,agentS)=MA;


// step 3 -  Server --> Alice:{{NA,KAB,CB}{KAB,CA}KBS}KAS --trasformato --- Server --> Eve {{NA,KAB,CE}{KAB,CA}KBS}KAS  


		//check informazioni base
		
step
check mode=ACTIVE;
// Server memorizza le proprie conoscenze
check 	knowsIdentityCertificate(agentS,messageField(agentE,agentS,1,MA))=true;
check 	knowsIdentityCertificate(agentS,messageField(agentE,agentS,2,MA))=true;
check 	knowsNonce(agentS,messageField(agentE,agentS,3,MA))=true;
check 	messageField(agentE,agentS,1,MA)=CA;
check	messageField(agentE,agentS,2,MA)=CB;
check	messageField(agentE,agentS,3,MA)=NA;

// Server prepara i campi del messaggio da inviare al Eve

check 	protocolMessage(1,agentS,agentE)=MB;
check 	messageField(agentS,agentE,1,MB)=messageField(agentE,agentS,3,MA);
check 	messageField(agentS,agentE,2,MB)=KAB;
check	messageField(agentS,agentE,3,MB)=messageField(agentE,agentS,2,MA);
check	messageField(agentS,agentE,4,MB)=KAB;
check	messageField(agentS,agentE,5,MB)=messageField(agentE,agentS,1,MA);
check 	symEnc(MB,1,4,5)=KBS;
check 	symEnc(MB,2,1,5)=KAS;
check	internalStateB(agentB)=WAITING_MD ;
check   internalStateS(agentS)=END_S;

// verifico il contenuto dei campi
check	messageField(agentE,agentS,1,MA)=CA;
check	messageField(agentE,agentS,2,MA)=CB;
check	messageField(agentE,agentS,3,MA)=NA;

  // Informazioni in input step 4
  
check 	protocolMessage(1,agentS,agentE)=MB; 
check	protocolMessage(1,agentE,agentA)!=MB;
check 	symDec(MB,2,1,5,agentE)=false;
check   symDec(MB,1,4,5,agentE)=true;

// step 4 -  Server --> Alice:{{NA,KAB,CB}{KAB,CA}KBS}KAS --trasformato --- Eve --> Alice {{NA,KAB,CE}{KAB,CA}KBS}KAS  


		//check informazioni base
		
step
check mode=ACTIVE;
// Server memorizza le proprie conoscenze
//nessuna
check 	knowsNonce(agentE,messageField(agentS,agentE,1,MB))=true;
check	knowsSymKey(agentE,messageField(agentS,agentE,2,MB))=false;
check	knowsIdentityCertificate(agentE,messageField(agentS,agentE,3,MB))=true;
check	knowsSymKey(agentE,messageField(agentS,agentE,4,MB))=false;
check 	knowsIdentityCertificate(agentE,messageField(agentS,agentE,5,MB))=true;
check 	knowsNonce(agentE,NA)=true;
check	knowsSymKey(agentE,KAB)=false;
check	knowsIdentityCertificate(agentE,CA)=true;

// Eve prepara i campi del messaggio da inviare ad Alice
check	protocolMessage(1,agentE,agentA)=MB;
check   messageField(agentE,agentA,1,MB)=messageField(agentS,agentE,1,MB);
check   messageField(agentE,agentA,2,MB)=messageField(agentS,agentE,2,MB);
check   messageField(agentE,agentA,3,MB)=messageField(agentS,agentE,3,MB);
check   messageField(agentE,agentA,4,MB)=messageField(agentS,agentE,4,MB);
check   messageField(agentE,agentA,5,MB)=messageField(agentS,agentE,5,MB);
check   messageField(agentE,agentA,1,MB)=NA;
check   messageField(agentE,agentA,2,MB)=KAB;
check   messageField(agentE,agentA,3,MB)=CB;
check   messageField(agentE,agentA,4,MB)=KAB;
check   messageField(agentE,agentA,5,MB)=CA;

  // Informazioni in input step 5
    
check symDec(MB,2,1,5,agentA)=true;
check symDec(MB,1,4,5,self)=false;
check internalStateA(agentA)=WAITING_MC;
check protocolMessage(1,agentE,agentA)=MB;
  
  // step 5 -  Alice --> Bob:{KAB,CA}KBS --trasformato --- Alice --> Eve {KAB,CA}KBS 


		//check informazioni base
		
step
check mode=ACTIVE;
// Alice memorizza le proprie conoscenze

check 	knowsNonce(agentA,messageField(agentE,agentA,1,MB))=true;
check 	knowsSymKey(agentA,messageField(agentE,agentA,2,MB))=true;
check 	knowsIdentityCertificate(agentA,messageField(agentE,agentA,3,MB))=true;
check 	knowsSymKey(agentA,messageField(agentE,agentA,4,MB))=true;
check 	knowsIdentityCertificate(agentA,messageField(agentE,agentA,5,MB))=true;
check 	protocolMessage(2,agentA,agentE)=MC;
check 	messageField(agentA,agentE,1,MC)=KAB;
check 	messageField(agentA,agentE,2,MC)=messageField(agentE,agentA,5,MB);
check 	messageField(agentA,agentE,2,MC)=CA;
check 	symEnc(MC,1,1,2)=KBS;
check	internalStateA(agentA)=CHECK_END_A;

  // Informazioni in input step 6
  
check 	protocolMessage(2,agentA,agentE)=MC; 
check	protocolMessage(2,agentE,agentB)!=MC;
check 	symDec(MC,1,1,2,agentE)=true;

  // step 6 -  Alice --> Bob:{KAB,CA}KBS --trasformato --- Eve --> Bob {KEB,CA}KBS 


		//check informazioni base
		
step
check mode=ACTIVE;

// Eve prepara i campi del messaggio da inviare a Bob
check   protocolMessage(2,agentE,agentB)=MC;
check   messageField(agentE,agentB,1,MC)=KEB;
check   messageField(agentE,agentB,2,MC)=messageField(agentA,agentE,2,MC);
check	messageField(agentA,agentE,2,MC)=CA;
check   messageField(agentA,agentE,1,MC)=KAB;
check   symDec(MC,1,1,2,self)=false;
check   knowsSymKey(agentE,messageField(agentA,agentE,1,MC))=true;
check   knowsSymKey(agentE,KAB)=true;
check   knowsIdentityCertificate(agentE,messageField(agentA,agentE,2,MC))=true;
check   knowsIdentityCertificate(agentE,CA)=true;

  // Informazioni in input step 7

    
check 	symDec(MC,1,1,2,agentB)=true;
check 	internalStateB(agentB)=WAITING_MD;
check 	protocolMessage(2,agentE,agentB)=MC;


// step 7 -  Bob---->Alice:{KAB,CA}KBS --trasformato --- Bob --> Eve:{KAB,CA}KBS  


step
check 	mode=ACTIVE;
// Bob memorizza le proprie conoscenze

check 	knowsSymKey(agentB,messageField(agentE,agentB,1,MC))=true;
check 	knowsIdentityCertificate(agentB,messageField(agentE,agentB,2,MC))=true;
check 	knowsSymKey(agentB,KAB)=true;
check 	knowsIdentityCertificate(agentB,CA)=true;
check 	protocolMessage(3,agentB,agentE)=MD;
check 	symDec(MC,1,1,2,agentB)=true;


  // Informazioni in input step 8
  
check 	protocolMessage(3,agentB,agentE)=MD; 
check	protocolMessage(3,agentE,agentA)!=MD;
check 	symDec(MD,1,1,1,agentE)=true;


  // step 8 -  Bob---->Alice:{KAB,CA}KBS --trasformato --- Eve --> Alice:{KAB,CA}KBS  


		//check informazioni base
		
step
check mode=ACTIVE;

// Eve prepara i campi del messaggio da inviare a Alice

check 	protocolMessage(3,agentE,agentA)=MD;
check	messageField(agentE,agentA,1,MD)=messageField(agentB,agentE,1,MD);
check	messageField(agentB,agentE,1,MD)=NB;
check 	symDec(MD,1,1,1,agentE)=true;
check	knowsNonce(agentE,messageField(agentB,agentE,1,MD))=true;
check	knowsNonce(agentE,NB)=true;

  // Informazioni in input step 9

    
check 	symDec(MD,1,1,1,agentA)=true;
check 	internalStateA(agentA)=CHECK_END_A;
check 	protocolMessage(3,agentE,agentA)=MD;


// step 9 FINE  


step
check 	mode=ACTIVE;

check	internalStateA(agentA)=END_A;
check	internalStateS(agentS)=END_S;
check	internalStateB(agentB)=END_B;

