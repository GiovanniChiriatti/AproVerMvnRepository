scenario test1YAHALOM

//Test di receiver Eve in modalitÃ  Passiva

load TestYAHALOM.asm


//  i messaggi del protocollo sono:
//						  REQCOM
//						  ENCKBS
//						  GENKEYSES
//						  FRWVRNB
						
//controllo che nello stato inziale:						
//  stato iniziale di Alice sia IDLE_REQCOM
//  stato iniziale di Bob sia WAITING_ENCKBS
//  stato iniziale di Bob sia WAITING_GENKEYSES
// si impostano quindi le conoscenze per i singoli attori
set chosenMode:=PASSIVE;
set chosenReceiver:=AG_E;
check 	internalStateA(agentA)=IDLE_REQCOM;
check	internalStateB(agentB)=WAITING_ENCKBS;
check	internalStateS(agentS)=WAITING_GENKEYSES;

check	knowsNonce(agentA,NA)=true;
check	knowsNonce(agentB,NB)=true;
check	knowsIdentityCertificate(agentA, CA)=true;
check	knowsIdentityCertificate(agentB, CA)=true;
check	knowsIdentityCertificate(agentB, CB)=true;
check	knowsIdentityCertificate(agentS, CB)=true;
check	knowsSymKey(agentA, KAS)=true;
check	knowsSymKey(agentB, KBS)=true;
check	knowsSymKey(agentE, KES)=true;
check	knowsSymKey(agentS, KAS)=true;
check	knowsSymKey(agentS, KBS)=true;
check	knowsSymKey(agentS, KAB)=true;



check mode=PASSIVE;
check receiver=AG_E;

// step 1 -  Alice->Bob:{CA,NA} --trasformato --- Alice -> Eve {CA,NA} 


// 
// A->E:{CA,NA}
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check protocolMessage(0,agentA,agentE)=REQCOM;
check messageField(agentA,agentE,1,REQCOM)=CA;
check messageField(agentA,agentE,2,REQCOM)=NA;
check internalStateA(agentA)=WAITING_FRWVRNB;	

//Informazioni in input allo step 2
check protocolMessage(0,agentA,agentE)=REQCOM;
check protocolMessage(0,agentE,agentB)!=REQCOM;


// step 2 -  Alice->Bob:{CA,NA} --trasformato --- Eve -> Bob {CA,NA} 


// 
// E->B:{CA,NA}
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check protocolMessage(0,agentE,agentB)=REQCOM;
check messageField(agentE,agentB,1,REQCOM)=messageField(agentA,agentE,1,REQCOM);
check messageField(agentA,agentE,1,REQCOM)=CA;
check messageField(agentE,agentB,1,REQCOM)=CA;

check messageField(agentE,agentB,2,REQCOM)=messageField(agentA,agentE,2,REQCOM);
check messageField(agentA,agentE,2,REQCOM)=NA;
check messageField(agentE,agentB,2,REQCOM)=NA;

check knowsIdentityCertificate(agentE,messageField(agentA,agentE,1,REQCOM))=true;
check knowsNonce(agentE,messageField(agentA,agentE,2,REQCOM))=true;
check knowsIdentityCertificate(agentE,CA)=true;
check knowsNonce(agentE,NA)=true;


//Informazioni in input allo step 3
check internalStateB(agentB)=WAITING_ENCKBS;
check protocolMessage(0,agentE,agentB)=REQCOM;

// step 3 -  Bob->Server:{CB}{CA,NA,NB}kbs --trasformato --- Bob->Eve:{CB}{CA,NA,NB}kbs 


// 
// B->E:{CB}{CA,NA,NB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check knowsIdentityCertificate(agentB,messageField(agentE,agentB,1,REQCOM))=true;
check messageField(agentE,agentB,1,REQCOM)=CA;
check knowsIdentityCertificate(agentB,CA)=true;

check knowsNonce(agentB,messageField(agentE,agentB,2,REQCOM))=true;
check messageField(agentE,agentB,2,REQCOM)=NA;
check knowsNonce(agentB,NA)=true;

check protocolMessage(1,agentB,agentE)=ENCKBS;
check messageField(agentB,agentE,1,ENCKBS)=CB;
check messageField(agentB,agentE,2,ENCKBS)=messageField(agentE,agentB,1,REQCOM);
check messageField(agentB,agentE,2,ENCKBS)=CA;
check messageField(agentB,agentE,3,ENCKBS)=messageField(agentE,agentB,2,REQCOM);
check messageField(agentB,agentE,3,ENCKBS)=NA;
check messageField(agentB,agentE,4,ENCKBS)=NB;
check symEnc(ENCKBS,1,2,4)=KBS;
check internalStateB(agentB)=CHECK_END_B;

		
//Informazioni in input allo step 4
check protocolMessage(1,agentB,agentE)=ENCKBS;
check protocolMessage(1,agentE,agentS)!=ENCKBS;
check symDec(ENCKBS,1,2,4,agentE)=false;
check symEnc(ENCKBS,1,2,4)=KBS;

// step 4 -  Bob->Server:{CB}{CA,NA,NB}kbs --trasformato --- Eve->Server:{CB}{CA,NA,NB}kes 


// 
// E->S:{CB}{CA,NA,NB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate		

check protocolMessage(1,agentE,agentS)=ENCKBS;
check messageField(agentE,agentS,1,ENCKBS)=messageField(agentB,agentE,1,ENCKBS);
check messageField(agentB,agentE,1,ENCKBS)=CB;
check messageField(agentB,agentE,1,ENCKBS)=CB;

check messageField(agentE,agentS,2,ENCKBS)=messageField(agentB,agentE,2,ENCKBS);
check messageField(agentB,agentE,2,ENCKBS)=CA;
check messageField(agentB,agentE,2,ENCKBS)=CA;

check messageField(agentE,agentS,3,ENCKBS)=messageField(agentB,agentE,3,ENCKBS);
check messageField(agentB,agentE,3,ENCKBS)=NA;
check messageField(agentB,agentE,3,ENCKBS)=NA;

check messageField(agentE,agentS,4,ENCKBS)=messageField(agentB,agentE,4,ENCKBS);
check messageField(agentB,agentE,4,ENCKBS)=NB;
check messageField(agentB,agentE,4,ENCKBS)=NB;

check knowsIdentityCertificate(agentE,messageField(agentB,agentE,1,ENCKBS))=true;	
check knowsIdentityCertificate(agentE,CB)=true;

check knowsIdentityCertificate(agentE,messageField(agentB,agentE,2,ENCKBS))=true;
check knowsIdentityCertificate(agentE,CA)=true;

check knowsNonce(agentE,messageField(agentB,agentE,3,ENCKBS))=true;
check knowsNonce(agentE,NA)=true;

check knowsNonce(agentE,messageField(agentB,agentE,4,ENCKBS))=false;
check knowsNonce(agentE,NB)=false;


//Informazioni in input allo step 5
check internalStateS(agentS)=WAITING_GENKEYSES;
check protocolMessage(1,agentE,agentS)=ENCKBS;	
check symDec(ENCKBS,1,2,4,agentS)=true;
	

// step 5 -  Server->Alice:{CB,KAB,NA,NB}kas{CA,KAB}kbs --trasformato --- Server->Eve:{CB,KAB,NA,NB}kas{CA,KAB}kbs 


// 
// s->E:{CB,KAB,NA,NB}kas{CA,KAB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check  knowsIdentityCertificate(agentS,messageField(agentE,agentS,1,ENCKBS))=true;
check  knowsIdentityCertificate(agentS,CB)=true;
check  messageField(agentE,agentS,1,ENCKBS)=CB;

check	knowsIdentityCertificate(agentS,messageField(agentE,agentS,2,ENCKBS))=true;
check	knowsIdentityCertificate(agentS,CA)=true;
check	messageField(agentE,agentS,2,ENCKBS)=CA;

check	knowsNonce(agentS,messageField(agentE,agentS,3,ENCKBS))=true;
check	knowsNonce(agentS,NA)=true;
check	messageField(agentE,agentS,3,ENCKBS)=NA;

check	knowsNonce(agentS,messageField(agentE,agentS,4,ENCKBS))=true;
check	knowsNonce(agentS,NB)=true;
check	messageField(agentE,agentS,4,ENCKBS)=NB;

check	protocolMessage(2,agentS,agentE)=GENKEYSES;
check	messageField(agentS,agentE,1,GENKEYSES)=messageField(agentE,agentS,1,ENCKBS);
check	messageField(agentE,agentS,1,ENCKBS)=CB;

check	messageField(agentS,agentE,2,GENKEYSES)=KAB;
check	messageField(agentS,agentE,3,GENKEYSES)=messageField(agentE,agentS,3,ENCKBS);
check 	messageField(agentE,agentS,3,ENCKBS)=NA;
check	messageField(agentS,agentE,3,GENKEYSES)=NA;

check	messageField(agentS,agentE,4,GENKEYSES)=messageField(agentE,agentS,4,ENCKBS);
check	messageField(agentE,agentS,4,ENCKBS)=NB;
check	messageField(agentS,agentE,4,GENKEYSES)=NB;

check	symEnc(GENKEYSES,1,1,4)=KAS;
check	messageField(agentS,agentE,5,GENKEYSES)=messageField(agentE,agentS,2,ENCKBS);
check	messageField(agentE,agentS,2,ENCKBS)=CA;
check	messageField(agentS,agentE,5,GENKEYSES)=CA;

check	messageField(agentS,agentE,6,GENKEYSES)=KAB;
check	symEnc(GENKEYSES,1,5,6)=KBS;
check	internalStateS(agentS)=END_S;

//Informazioni in input allo step 6	
check protocolMessage(2,agentS,agentE)=GENKEYSES;
check protocolMessage(2,agentE,agentB)!=GENKEYSES;
check symDec(GENKEYSES,1,1,4,agentE)=false;
check symDec(GENKEYSES,1,5,6,agentE)=false;
check symEnc(GENKEYSES,1,1,4)=KAS;
check symEnc(GENKEYSES,1,5,6)=KBS;

// step 6 -  Server->Alice:{CB,KAB,NA,NB}kas{CA,KAB}kbs --trasformato --- Eve->Alice:{CB,KAB,NA,NB}kas{CA,KAB}kbs 

// 
// E->A:{CB,KAB,NA,NB}kas{CA,KAB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate		
		
check protocolMessage(2,agentE,agentA)=GENKEYSES;
check messageField(agentE,agentA,1,GENKEYSES)=messageField(agentS,agentE,1,GENKEYSES);
check messageField(agentS,agentE,1,GENKEYSES)=CB;
check messageField(agentE,agentA,1,GENKEYSES)=CB;

check messageField(agentE,agentA,2,GENKEYSES)=messageField(agentS,agentE,2,GENKEYSES);
check messageField(agentS,agentE,2,GENKEYSES)=KAB;
check messageField(agentE,agentA,2,GENKEYSES)=KAB;

check messageField(agentE,agentA,3,GENKEYSES)=messageField(agentS,agentE,3,GENKEYSES);
check messageField(agentS,agentE,3,GENKEYSES)=NA;
check messageField(agentE,agentA,3,GENKEYSES)=NA;

check messageField(agentE,agentA,4,GENKEYSES)=messageField(agentS,agentE,4,GENKEYSES);
check messageField(agentS,agentE,4,GENKEYSES)=NB;
check messageField(agentE,agentA,4,GENKEYSES)=NB;

check messageField(agentE,agentA,5,GENKEYSES)=messageField(agentS,agentE,5,GENKEYSES);
check messageField(agentS,agentE,5,GENKEYSES)=CA;
check messageField(agentE,agentA,5,GENKEYSES)=CA;

check messageField(agentE,agentA,6,GENKEYSES)=messageField(agentS,agentE,6,GENKEYSES);
check messageField(agentS,agentE,6,GENKEYSES)=KAB;
check messageField(agentE,agentA,6,GENKEYSES)=KAB;

check knowsIdentityCertificate(agentE,messageField(agentS,agentE,1,GENKEYSES))=true;
check knowsIdentityCertificate(agentE,CB)=true;
check  messageField(agentS,agentE,1,GENKEYSES)=CB;

check knowsSymKey(agentE,messageField(agentS,agentE,2,GENKEYSES))=false;
check knowsSymKey(agentE,KAB)=false;
check messageField(agentS,agentE,2,GENKEYSES)=KAB;

check knowsNonce(agentE,messageField(agentS,agentE,3,GENKEYSES))=true;
check knowsNonce(agentE,NA)=true;
check messageField(agentS,agentE,3,GENKEYSES)=NA;

check knowsNonce(agentE,messageField(agentS,agentE,4,GENKEYSES))=false;
check knowsNonce(agentE,NB)=false;
check messageField(agentS,agentE,4,GENKEYSES)=NB;
//check symEnc(GENKEYSES,1,1,4)=KAS;

//Informazioni in input allo step 7
check internalStateA(agentA)=WAITING_FRWVRNB;
check protocolMessage(2,agentE,agentA)=GENKEYSES;	
check symDec(GENKEYSES,1,1,4,agentA)=true;
	

// step 7 -  Alice->Bob:{CA,KAB}kbs{NB}kab --trasformato --- Alice->Eve:{CA,KAB}kbs{NB}kab 


// 
// A->E:{CA,KAB}kbs{NB}kab
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate

check  knowsIdentityCertificate(agentA,messageField(agentE,agentA,1,GENKEYSES))=true;
check  messageField(agentE,agentA,1,GENKEYSES)=CB;
check  knowsIdentityCertificate(agentA,CB)=true;

check  knowsSymKey(agentA,messageField(agentE,agentA,2,GENKEYSES))=true;
check  messageField(agentE,agentA,2,GENKEYSES)=KAB;
check  knowsSymKey(agentA,KAB)=true;

check  knowsNonce(agentA,messageField(agentE,agentA,3,GENKEYSES))=true;
check  messageField(agentE,agentA,3,GENKEYSES)=NA;
check  knowsNonce(agentA,NA)=true;

check  knowsNonce(agentA,messageField(agentE,agentA,4,GENKEYSES))=true;
check  messageField(agentE,agentA,4,GENKEYSES)=NB;
check  knowsNonce(agentA,NB)=true;

check  protocolMessage(3,agentA,agentE)=FRWVRNB;
check  messageField(agentA,agentE,1,FRWVRNB)=messageField(agentE,agentA,5,GENKEYSES);
check  messageField(agentE,agentA,5,GENKEYSES)=CA;
check  messageField(agentA,agentE,1,FRWVRNB)=CA;

check  messageField(agentA,agentE,2,FRWVRNB)=messageField(agentE,agentA,6,GENKEYSES);
check  messageField(agentE,agentA,6,GENKEYSES)=KAB;
check  messageField(agentA,agentE,2,FRWVRNB)=KAB;

check  symEnc(FRWVRNB,1,1,2)=KBS;
check  messageField(agentA,agentE,3,FRWVRNB)=messageField(agentE,agentA,4,GENKEYSES);
check  messageField(agentE,agentA,4,GENKEYSES)=NB;
check  messageField(agentA,agentE,3,FRWVRNB)=NB;

check  symEnc(FRWVRNB,1,3,3)=messageField(agentE,agentA,6,GENKEYSES);
check  symEnc(FRWVRNB,1,3,3)=KAB;

check  internalStateA(agentA)=END_A;

//Informazioni in input allo step 8	
check protocolMessage(3,agentA,agentE)=FRWVRNB;
check protocolMessage(3,agentE,agentB)!=GENKEYSES;
check symDec(FRWVRNB,1,1,2,agentE)=false;
check symDec(FRWVRNB,1,3,3,agentE)=false;


// step 8 -  Alice->Bob:{CA,KAB}kbs{NB}kab --trasformato --- Alice->Eve:{CA,KAB}kbs{NB}kab 


// 
// E->B:{CA,KAB}kbs{NB}kab
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate

check protocolMessage(3,agentE,agentB)=FRWVRNB;
check messageField(agentE,agentB,1,FRWVRNB)=messageField(agentA,agentE,1,FRWVRNB);
check messageField(agentA,agentE,1,FRWVRNB)=CA;
check messageField(agentE,agentB,1,FRWVRNB)=CA;

check messageField(agentE,agentB,2,FRWVRNB)=messageField(agentA,agentE,2,FRWVRNB);
check messageField(agentA,agentE,2,FRWVRNB)=KAB;
check messageField(agentE,agentB,2,FRWVRNB)=KAB;

check messageField(agentE,agentB,3,FRWVRNB)=messageField(agentA,agentE,3,FRWVRNB);
check messageField(agentA,agentE,3,FRWVRNB)=NB;	
check messageField(agentE,agentB,3,FRWVRNB)=NB;


check knowsIdentityCertificate(agentE,messageField(agentA,agentE,1,FRWVRNB))=true;
check knowsIdentityCertificate(agentE,CA)=true;
check messageField(agentA,agentE,1,FRWVRNB)=CA;

check knowsSymKey(agentE,messageField(agentA,agentE,2,FRWVRNB))=false;
check knowsSymKey(agentE,KAB)=false;
check messageField(agentA,agentE,2,FRWVRNB)=KAB;

check knowsNonce(agentE,messageField(agentA,agentE,3,FRWVRNB))=false;
check knowsNonce(agentE,NB)=false;
check messageField(agentA,agentE,3,FRWVRNB)=NB;

//Informazioni in input allo step 9	
check internalStateB(agentB)=CHECK_END_B;
check protocolMessage(3,agentE,agentB)=FRWVRNB;
//check symDec(FRWVRNB,1,3,3,agentB)= true;
check symDec(FRWVRNB,1,1,2,agentB)= true;


step
 
check	knowsIdentityCertificate(agentB,messageField(agentE,agentB,1,FRWVRNB))=true;
check	knowsSymKey(agentB,messageField(agentE,agentB,2,FRWVRNB))=true;
check	knowsSymKey(agentB,KAB)=true;
check	knowsNonce(agentB,messageField(agentE,agentB,3,FRWVRNB))=true;
check	knowsNonce(agentB,NB)=true;
check	internalStateB(agentB)=END_B;

//check symDec(FRWVRNB,1,3,3,agentB)= true;	

