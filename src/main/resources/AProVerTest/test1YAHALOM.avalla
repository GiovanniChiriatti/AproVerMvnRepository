scenario test1YAHALOM

//Test di receiver Eve in modalità Passiva

load YAHALOM.asm


//  i messaggi del protocollo sono:
//						  REQCOM
//						  ENCKBS
//						  GENKEYSES
//						  FRWVRNB
						
//controllo che nello stato inziale:						
//  stato iniziale di Alice sia IDLE_REQCOM
//  stato iniziale di Bob sia WAITING_ENCKBS
//  stato iniziale di Bob sia WAITING_GENKEYSES
// si impostano quindi le conoscenze per i singoli attori
set chosenMode:=PASSIVE;
set chosenReceiver:=AG_E;
check 	internalStateA(agentA)=IDLE_REQCOM;
check	internalStateB(agentB)=WAITING_ENCKBS;
check	internalStateS(agentS)=WAITING_GENKEYSES;

check	knowsNonce(agentA,NA)=true;
check	knowsNonce(agentB,NB)=true;
check	knowsIdentityCertificate(agentA, CA)=true;
check	knowsIdentityCertificate(agentB, CA)=true;
check	knowsIdentityCertificate(agentB, CB)=true;
check	knowsIdentityCertificate(agentS, CB)=true;
check	knowsSymKey(agentA, KAS)=true;
check	knowsSymKey(agentB, KBS)=true;
check	knowsSymKey(agentE, KES)=true;
check	knowsSymKey(agentS, KAS)=true;
check	knowsSymKey(agentS, KBS)=true;
check	knowsSymKey(agentS, KAB)=true;



check mode=PASSIVE;
check receiver=AG_E;

// step 1 -  Alice->Bob:{CA,NA} --trasformato --- Alice -> Eve {CA,NA} 


// 
// A->E:{CA,NA}
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check protocolMessage(0,agentA,agentE)=REQCOM;
check messageField(agentA,agentE,1,REQCOM)=CA;
check messageField(agentA,agentE,2,REQCOM)=NA;
check internalStateA(agentA)=WAITING_FRWVRNB;	

//Informazioni in input allo step 2
check protocolMessage(0,agentA,agentE)=REQCOM;
check protocolMessage(0,agentE,agentB)!=REQCOM;


// step 2 -  Alice->Bob:{CA,NA} --trasformato --- Eve -> Bob {CA,NA} 


// 
// E->B:{CA,NA}
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check protocolMessage(0,agentE,agentB)=REQCOM;
check messageField(agentE,agentB,1,REQCOM)=messageField(agentA,agentE,1,REQCOM);
check messageField(agentE,agentB,2,REQCOM)=messageField(agentA,agentE,2,REQCOM);
check knowsIdentityCertificate(agentE,messageField(agentA,agentE,1,REQCOM))=true;
check knowsNonce(agentE,messageField(agentA,agentE,2,REQCOM))=true;
check knowsIdentityCertificate(agentE,CA)=true;
check knowsNonce(agentE,NA)=true;
check messageField(agentA,agentE,1,REQCOM)=CA;
check messageField(agentA,agentE,2,REQCOM)=NA;

//Informazioni in input allo step 3
check internalStateB(agentB)=WAITING_ENCKBS;
check protocolMessage(0,agentE,agentB)=REQCOM;

// step 3 -  Bob->Server:{CB}{CA,NA,NB}kbs --trasformato --- Bob->Eve:{CB}{CA,NA,NB}kes 


// 
// B->E:{CB}{CA,NA,NB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate
check knowsIdentityCertificate(agentB,messageField(agentE,agentB,1,REQCOM))=true;
check knowsNonce(agentB,messageField(agentE,agentB,2,REQCOM))=true;
check protocolMessage(1,agentB,agentE)=ENCKBS;
check messageField(agentB,agentE,1,ENCKBS)=CB;
check messageField(agentB,agentE,2,ENCKBS)=messageField(agentE,agentB,1,REQCOM);
check messageField(agentB,agentE,3,ENCKBS)=messageField(agentE,agentB,2,REQCOM);
check messageField(agentB,agentE,4,ENCKBS)=NB;
check symEnc(ENCKBS,1,2,4)=KES;
check internalStateB(agentB)=CHECK_END_B;
check messageField(agentE,agentB,1,REQCOM)=CA;
check messageField(agentE,agentB,2,REQCOM)=NA;
check knowsIdentityCertificate(agentB,CA)=true;
check knowsNonce(agentB,NA)=true;	
check messageField(agentB,agentE,2,ENCKBS)=CA;
check messageField(agentB,agentE,3,ENCKBS)=NA;	
		
//Informazioni in input allo step 4
check protocolMessage(1,agentB,agentE)=ENCKBS;
check protocolMessage(1,agentE,agentS)!=ENCKBS;
check symDec(ENCKBS,1,2,4,agentE)=true;
check symEnc(ENCKBS,1,2,4)=KES;

// step 4 -  Bob->Server:{CB}{CA,NA,NB}kbs --trasformato --- Eve->Server:{CB}{CA,NA,NB}kes 


// 
// E->S:{CB}{CA,NA,NB}kbs
		//check informazioni base
		
step
check mode=PASSIVE;
		//check informazioni aggiornate		

check protocolMessage(1,agentE,agentS)=ENCKBS;
check messageField(agentE,agentS,1,ENCKBS)=messageField(agentB,agentE,1,ENCKBS);
check messageField(agentE,agentS,2,ENCKBS)=messageField(agentB,agentE,2,ENCKBS);
check messageField(agentE,agentS,3,ENCKBS)=messageField(agentB,agentE,3,ENCKBS);
check messageField(agentE,agentS,4,ENCKBS)=messageField(agentB,agentE,4,ENCKBS);
check knowsIdentityCertificate(agentE,messageField(agentB,agentE,1,ENCKBS))=true;		
check messageField(agentB,agentE,1,ENCKBS)=CB;
check messageField(agentB,agentE,2,ENCKBS)=CA;
check messageField(agentB,agentE,3,ENCKBS)=NA;
check messageField(agentB,agentE,4,ENCKBS)=NB;
check knowsIdentityCertificate(agentE,messageField(agentB,agentE,1,ENCKBS))=true;
check knowsIdentityCertificate(agentE,messageField(agentB,agentE,2,ENCKBS))=true;
check knowsOther(agentE,messageField(agentB,agentE,3,ENCKBS))=true;
check knowsNonce(agentE,messageField(agentB,agentE,4,ENCKBS))=true;
check symEnc(ENCKBS,1,2,4)=KES;
check knowsIdentityCertificate(agentE,CB)=true;
check knowsIdentityCertificate(agentE,CA)=true;
check knowsOther(agentE,NA)=true;
check knowsNonce(agentE,NB)=true;
		
//Informazioni in input allo step 5
check internalStateS(agentS)=WAITING_GENKEYSES;
check protocolMessage(1,agentE,agentS)=ENCKBS;	
check symDec(ENCKBS,1,2,4,agentS)=true;
	
		
/*	
check protocolMessage(agentA,agentE)= NAK;
check messageField(agentA,agentE,1,NAK)=NA;
check messageField(agentA,agentE,2,NAK)=ID_A;
check asymEnc(NAK,1,1,2 )=PUBKE;
check internalStateA(agentA)= WAITING_NNK;
        // Informazioni in input step 2	
check protocolMessage(agentE,agentA)!= NAK;

//step 2   Alice->Bob:{NA,ID_A}PUBKB --trasformato ---  Eve -->Bob {NA,ID_A}PUBKB 
step

check mode=PASSIVE;
		//check informazioni aggiornate
check 	knowsNonce(agentE,messageField(agentA,agentE,1,NAK))=true;
check	knowsIdentityCertificate(agentE,messageField(agentA,agentE,2,NAK))=true;
check	protocolMessage(agentE,agentB )= NAK;
check	messageField(agentE,agentB,1,NAK)=messageField(agentA,agentE,1,NAK);
check	messageField(agentE,agentB,2,NAK)=messageField(agentA,agentE,2,NAK);
check 	asymEnc(NAK,1,1,2)=PUBKB;
        // Informazioni in input step 3	
check internalStateB(agentB)=WAITING_NAK; 
check protocolMessage(agentE ,agentB)=NAK;
check asymDec(NAK,1,1,2,agentB)=true;

//step 3   Bob->Alice:{NA,NB}PUBKA --trasformato ---  Bob->Eve:{NA,NB}PUBKA 

step

check mode=PASSIVE;
		//check informazioni aggiornate
		
		//check informazioni aggiornate
check 	knowsNonce(agentB,messageField(agentE,agentB,1,NAK))=true;
check	knowsIdentityCertificate(agentB,messageField(agentE,agentB,2,NAK))=true;
check	protocolMessage(agentB,agentE)=NNK;
check	messageField(agentB,agentE,1,NNK)=NA;
check	messageField(agentB,agentE,2,NNK)=NB;
check	asymEnc(NNK,1,1,2)=PUBKA;
check	internalStateB(agentB)= WAITING_NK;
        // Informazioni in input step 4	
check protocolMessage(agentB ,agentE)=NNK;
check protocolMessage(agentE ,agentA)!=NNK;
check asymDec(NNK,1,1,2,agentE)=false;

//step 4   Bob->Alice:{NA,NB}PUBKA --trasformato ---  Eve->Alice:{NA,NB}PUBKA 
// Eve non riesce a decodificare il messaggio e lo trasmette così com'è a Alice
step

check mode=PASSIVE;

		//check informazioni aggiornate
// il campo con valore NA è già conosciuto da Eve dal messaggio precedente e quindi il check deve avere risultato true
check 	knowsNonce(agentE,messageField(agentB,agentE,1,NNK))=true;
check	knowsNonce(agentE,messageField(agentB,agentE,2,NNK))=false;
check   protocolMessage(agentE,agentA)= NNK;
// qui probabilmente c'è un errore il messageField dovrebbe errere aggionato quello di alice non di BOB
// check	messageField(agentE,agentA,1,NNK)=messageField(agentB,agentE,1,NNK);
// check	messageField(agentE,agentA,2,NNK)=messageField(agentB,agentE,2,NNK);
//
check	messageField(agentE,agentB,1,NNK)=messageField(agentB,agentE,1,NNK);
check	messageField(agentE,agentB,2,NNK)=messageField(agentB,agentE,2,NNK);
//

check 	messageField(agentB,agentE,1,NNK)=NA;
check	messageField(agentB,agentE,2,NNK)=NB;

        // Informazioni in input step 5	
check 	internalStateA(agentA)=WAITING_NNK;
check 	protocolMessage(agentE ,agentA) =NNK;
check 	asymDec(NNK,1,1,2,agentA)=true;

//step 5    Alice->Bob:{NB}PUBKB --trasformato ---  Alice-->Eve:{NB}PUBKE 

step

check 	mode=PASSIVE;

		//check informazioni aggiornate

check 	knowsNonce(agentA,messageField(agentE,agentA,1,NNK))=true;
check 	knowsNonce(agentA,messageField(agentE,agentA,2,NNK))=true;
check 	protocolMessage(agentA,agentE)=NK;
check 	messageField(agentA,agentE,1,NK)=NB;	
check 	asymEnc(NK,1,1,1)=PUBKE;
check 	internalStateA(agentA)= END_A;

        // Informazioni in input step 6	
check protocolMessage(agentA,agentE)=NK ;
check protocolMessage(agentE, agentB )!=NK;
check asymDec(NK,1,1,1,agentE)=true;

//step 6    Alice->Bob:{NB}PUBKB --trasformato ---  Eve-->Bob:{NB}PUBKE 

step

check 	mode=PASSIVE;

		//check informazioni aggiornate
check 	knowsNonce(agentE,messageField(agentA,agentE,1,NK))=true;
check	messageField(agentA,agentE,1,NK)=NB;
check	protocolMessage(agentE,agentB)= NK;	

        // Informazioni in input step 6	
check internalStateB(agentB)=WAITING_NK;
check protocolMessage(agentE,agentB)=NK;
check asymDec(NK,1,1,1,agentB)=true;


//step 7     

step

check 	mode=PASSIVE;

		//check informazioni aggiornate
		
check internalStateB(agentB)=END_B;
*/
*/