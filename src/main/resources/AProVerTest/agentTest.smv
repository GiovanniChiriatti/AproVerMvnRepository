--file C:\Users\gioeg\AProVerDirectory\Aprover\src\main\resources\AProVerTest\agentTest.smv
-- options: flatten? true
MODULE main
	VAR
		asymEnc_KK_1_1_1: {CA, KNOWLEDGE_UNDEF, NB, NULL, PRIVKA, PRIVKB, PRIVKE, PUBKA, PUBKB, PUBKE, SIGNPRIVKA, SIGNPRIVKB, SIGNPRIVKE, SIGNPUBKA, SIGNPUBKB, SIGNPUBKE, SKAB, SKAE, SKEB}; --controlled
		internalStateA: {CHECK_END_A, END_A, IDLE_KK, STATEALICE_UNDEF, WAITING_CSNK}; --controlled
		internalStateB: {CHECK_END_B, END_B, STATEBOB_UNDEF, WAITING_NK}; --controlled
		mode: {ACTIVE, MODALITY_UNDEF, PASSIVE}; --controlled
		receiver: {AG_A, AG_B, AG_E, RECEIVER_UNDEF}; --controlled
		sign_CSNK_1_2_2: {CA, KNOWLEDGE_UNDEF, NB, NULL, PRIVKA, PRIVKB, PRIVKE, PUBKA, PUBKB, PUBKE, SIGNPRIVKA, SIGNPRIVKB, SIGNPRIVKE, SIGNPUBKA, SIGNPUBKB, SIGNPUBKE, SKAB, SKAE, SKEB}; --controlled
		symEnc_CSNK_2_1_2: {CA, KNOWLEDGE_UNDEF, NB, NULL, PRIVKA, PRIVKB, PRIVKE, PUBKA, PUBKB, PUBKE, SIGNPRIVKA, SIGNPRIVKB, SIGNPRIVKE, SIGNPUBKA, SIGNPUBKB, SIGNPUBKE, SKAB, SKAE, SKEB}; --controlled
		symEnc_NK_1_1_1: {CA, KNOWLEDGE_UNDEF, NB, NULL, PRIVKA, PRIVKB, PRIVKE, PUBKA, PUBKB, PUBKE, SIGNPRIVKA, SIGNPRIVKB, SIGNPRIVKE, SIGNPUBKA, SIGNPUBKB, SIGNPUBKE, SKAB, SKAE, SKEB}; --controlled
	DEFINE
		name_AG_A := AGENTA;
		name_AG_B := AGENTB;
		name_AG_E := AGENTE;
	CONSTANTS PROVA, KNOWLEDGE_UNDEF, CA, NB, NULL, PRIVKA, PRIVKB, PRIVKE, PUBKA, PUBKB, PUBKE, SIGNPRIVKA, SIGNPRIVKB, SIGNPRIVKE, SIGNPUBKA, SIGNPUBKB, SIGNPUBKE, SKAB, SKAE, SKEB, RECEIVER_UNDEF, AG_A, AG_B, AG_E, AGENTA, ALICE_UNDEF, AGENTA, MODALITY_UNDEF, ACTIVE, PASSIVE, STATEBOB_UNDEF, CHECK_END_B, END_B, WAITING_NK, AGENTB, BOB_UNDEF, AGENTB, STATEALICE_UNDEF, CHECK_END_A, END_A, IDLE_KK, WAITING_CSNK, AGENTE, EVE_UNDEF, AGENTE, MESSAGE_UNDEF, CSNK, KK, NK;
	ASSIGN
		init(asymEnc_KK_1_1_1) := KNOWLEDGE_UNDEF;
		init(internalStateA) := IDLE_KK;
		init(internalStateB) := WAITING_NK;
		init(mode) := PASSIVE;
		init(receiver) := AG_E;
		init(sign_CSNK_1_2_2) := KNOWLEDGE_UNDEF;
		init(symEnc_CSNK_2_1_2) := KNOWLEDGE_UNDEF;
		init(symEnc_NK_1_1_1) := KNOWLEDGE_UNDEF;
		next(asymEnc_KK_1_1_1) :=
			case
				(((receiver != AG_E) & (internalStateA = IDLE_KK)) | (((((protocolMessage_0_AGENTA_AGENTE = KK) & (protocolMessage_0_AGENTE_AGENTB != KK)) & (mode = ACTIVE)) & knowsAsymPubKey_AGENTE_PUBKB) | (knowsAsymPubKey_AGENTE_PUBKB & (((protocolMessage_0_AGENTA_AGENTE = KK) & (protocolMessage_0_AGENTE_AGENTB != KK)) & (mode = PASSIVE))))): PUBKB;
				((receiver = AG_E) & (!(receiver != AG_E) & (internalStateA = IDLE_KK))): PUBKE;
				TRUE: asymEnc_KK_1_1_1;
			esac;
		next(internalStateA) :=
			case
				((((receiver != AG_E) & ((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK))) & knowsSymKey_AGENTA_SKAB) | ((((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK)) & !(receiver != AG_E)) & ((receiver = AG_E) & knowsSymKey_AGENTA_SKAB))): END_A;
				(((receiver != AG_E) & (internalStateA = IDLE_KK)) | ((receiver = AG_E) & (!(receiver != AG_E) & (internalStateA = IDLE_KK)))): WAITING_CSNK;
				TRUE: internalStateA;
			esac;
		next(internalStateB) :=
			case
				((protocolMessage_2_AGENTE_AGENTB = CSNK) & (internalStateB = CHECK_END_B)): END_B;
				(((((internalStateB = WAITING_NK) & (protocolMessage_0_AGENTE_AGENTB = KK)) & (receiver != AG_E)) & knowsAsymPubKey_AGENTB_PUBKB) | (((receiver = AG_E) & knowsAsymPubKey_AGENTB_PUBKB) & (((internalStateB = WAITING_NK) & (protocolMessage_0_AGENTE_AGENTB = KK)) & !(receiver != AG_E)))): CHECK_END_B;
				TRUE: internalStateB;
			esac;
		next(mode) := mode;
		next(receiver) := receiver;
		next(sign_CSNK_1_2_2) :=
			case
				((((receiver != AG_E) & ((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK))) & knowsSymKey_AGENTA_SKAB) | ((((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK)) & !(receiver != AG_E)) & ((receiver = AG_E) & knowsSymKey_AGENTA_SKAB))): SIGNPRIVKA;
				TRUE: sign_CSNK_1_2_2;
			esac;
		next(symEnc_CSNK_2_1_2) :=
			case
				((((receiver != AG_E) & ((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK))) & knowsSymKey_AGENTA_SKAB) | ((((protocolMessage_1_AGENTE_AGENTA = NK) & (internalStateA = WAITING_CSNK)) & !(receiver != AG_E)) & ((receiver = AG_E) & knowsSymKey_AGENTA_SKAB))): messageField_AGENTA_AGENTE_1_KK;
				(((((protocolMessage_2_AGENTA_AGENTE = CSNK) & (protocolMessage_2_AGENTE_AGENTB != CSNK)) & (mode = ACTIVE)) & knowsSymKey_AGENTE_SKAB) | ((((protocolMessage_2_AGENTA_AGENTE = CSNK) & (protocolMessage_2_AGENTE_AGENTB != CSNK)) & (mode = PASSIVE)) & knowsSymKey_AGENTE_SKAB)): SKEB;
				TRUE: symEnc_CSNK_2_1_2;
			esac;
		next(symEnc_NK_1_1_1) :=
			case
				(((((internalStateB = WAITING_NK) & (protocolMessage_0_AGENTE_AGENTB = KK)) & (receiver != AG_E)) & knowsAsymPubKey_AGENTB_PUBKB) | (((receiver = AG_E) & knowsAsymPubKey_AGENTB_PUBKB) & (((internalStateB = WAITING_NK) & (protocolMessage_0_AGENTE_AGENTB = KK)) & !(receiver != AG_E)))): messageField_AGENTE_AGENTB_1_KK;
				((((mode = PASSIVE) & ((protocolMessage_1_AGENTE_AGENTA != NK) & (protocolMessage_1_AGENTB_AGENTE = NK))) & knowsSymKey_AGENTE_SKAB) | (knowsSymKey_AGENTE_SKAB & (((protocolMessage_1_AGENTE_AGENTA != NK) & (protocolMessage_1_AGENTB_AGENTE = NK)) & (mode = ACTIVE)))): messageField_AGENTA_AGENTE_1_KK;
				TRUE: symEnc_NK_1_1_1;
			esac;
--CTL properties
CTLSPEC NAME ctl0 := !(EF(!(knowsNonce_AGENTA_NB)));
CTLSPEC NAME ctl1 := EF((!(EF(!(knowsNonce_AGENTE_NB))) | knowsNonce_AGENTA_NB));
